{"version":3,"sources":["../index.ts","../src/emit-keypress.ts","../src/emit-keys.ts","../src/utils.ts","../src/keycodes.ts"],"sourcesContent":["import type readline from 'node:readline';\nimport { emitKeypressEvents } from './src/emit-keypress';\nimport { createShortcut, isPrintableCharacter } from './src/utils';\nimport { keycodes } from './src/keycodes';\n\nexport const emitKeypress = ({\n  input = process.stdin,\n  keymap = [],\n  onKeypress,\n  bufferTimeout = 3\n}: {\n  // eslint-disable-next-line no-undef\n  input?: NodeJS.ReadStream;\n  keymap?: Array<{ sequence: string; shortcut: string }>;\n  // eslint-disable-next-line no-unused-vars\n  onKeypress: (input: string, key: readline.Key, close: () => void) => void;\n}) => {\n  if (!input || (input !== process.stdin && !input.isTTY)) {\n    throw new Error('Invalid stream passed');\n  }\n\n  const isRaw = input.isRaw;\n  let closed = false;\n\n  // Buffering keypress events\n  let keyBuffer: Array<{ input: string; key: readline.Key }> = [];\n  // eslint-disable-next-line no-undef\n  let timeout: NodeJS.Timeout | null = null;\n\n  function emitBufferedKeypress() {\n    if (keyBuffer.length > 0) {\n      // Combine buffered keypress events into a single event\n      // eslint-disable-next-line complexity\n      const combinedKey = keyBuffer.reduce((acc, event) => {\n        if (acc.name === 'undefined') {\n          acc.name = '';\n        }\n\n        return {\n          sequence: acc.sequence + event.key.sequence,\n          printable: acc.printable ?? event.key.printable ?? true,\n          name: (acc.name || '') + (event.key.name || ''),\n          ctrl: acc.ctrl || event.key.ctrl,\n          shift: acc.shift || event.key.shift,\n          meta: acc.meta || event.key.meta || false,\n          fn: acc.fn || event.key.fn,\n          shortcut: ''\n        };\n      }, {\n        name: '',\n        sequence: '',\n        printable: undefined,\n        ctrl: false,\n        shift: false,\n        meta: false,\n        fn: false,\n        shortcut: ''\n      });\n\n      let addShortcut = true;\n\n      for (const ele of keymap) {\n        if (combinedKey.sequence === ele.sequence) {\n          Object.assign(combinedKey, ele);\n          addShortcut = false;\n          break;\n        }\n      }\n\n      if (/f[0-9]/.test(combinedKey.name)) {\n        combinedKey.shortcut = combinedKey.name;\n        addShortcut = false;\n      }\n\n      if (addShortcut) {\n        combinedKey.shortcut ||= createShortcut(combinedKey);\n      }\n\n      combinedKey.printable = isPrintableCharacter(combinedKey.sequence);\n\n      keyBuffer = [];\n      return onKeypress(combinedKey.sequence, combinedKey, close);\n    }\n\n  }\n\n  function handleKeypress(input: string, key: readline.Key) {\n    closed = false;\n    keyBuffer.push({ input, key });\n    clearTimeout(timeout);\n    timeout = setTimeout(emitBufferedKeypress, bufferTimeout);\n  }\n\n  emitKeypressEvents(input);\n\n  function close() {\n    if (closed) return;\n    if (input.isTTY) input.setRawMode(isRaw);\n    if (onKeypress) input.off('keypress', handleKeypress);\n    closed = true;\n    input.pause();\n  }\n\n  // Disable automatic character echoing\n  if (input.isTTY) input.setRawMode(true);\n  input.setEncoding('utf8');\n  if (onKeypress) input.on('keypress', handleKeypress);\n  input.once('pause', close);\n  input.resume();\n  return close;\n};\n\nexport { keycodes, createShortcut, emitKeypressEvents };\nexport default emitKeypress;\n","// This file is a modified version of the original file from the readline module of Node.js\n// Copyright Joyent, Inc. and other Node contributors.\n// SPDX-License-Identifier: MIT\nimport { StringDecoder } from 'node:string_decoder';\nimport { clearTimeout, setTimeout } from 'node:timers';\nimport { charLengthAt, CSI, emitKeys } from './emit-keys';\n\nconst { kEscape } = CSI;\nconst KEYPRESS_DECODER = Symbol('keypress-decoder');\nconst ESCAPE_DECODER = Symbol('escape-decoder');\nconst kSawKeyPress = Symbol('saw-key-press');\n\n// GNU readline library - keyseq-timeout is 500ms (default)\nconst ESCAPE_CODE_TIMEOUT = 500;\n\n/**\n * accepts a readable Stream instance and makes it emit \"keypress\" events\n */\n\nexport function emitKeypressEvents(stream, iface = {}) {\n  if (stream[KEYPRESS_DECODER]) return;\n\n  stream[KEYPRESS_DECODER] = new StringDecoder('utf8');\n\n  stream[ESCAPE_DECODER] = emitKeys(stream);\n  stream[ESCAPE_DECODER].next();\n\n  const triggerEscape = () => stream[ESCAPE_DECODER].next('');\n  const { escapeCodeTimeout = ESCAPE_CODE_TIMEOUT } = iface;\n  let timeoutId;\n\n  function onData(input) {\n    if (stream.listenerCount('keypress') > 0) {\n      const string = stream[KEYPRESS_DECODER].write(input);\n      if (string) {\n        clearTimeout(timeoutId);\n\n        // This supports characters of length 2.\n        iface[kSawKeyPress] = charLengthAt(string, 0) === string.length;\n        iface.isCompletionEnabled = false;\n\n        let length = 0;\n        for (const character of string) {\n          length += character.length;\n\n          if (length === string.length) {\n            iface.isCompletionEnabled = true;\n          }\n\n          try {\n            stream[ESCAPE_DECODER].next(character);\n            // Escape letter at the tail position\n            if (length === string.length && character === kEscape) {\n              timeoutId = setTimeout(triggerEscape, escapeCodeTimeout);\n            }\n          } catch (err) {\n            // If the generator throws (it could happen in the `keypress`\n            // event), we need to restart it.\n            stream[ESCAPE_DECODER] = emitKeys(stream);\n            stream[ESCAPE_DECODER].next();\n            throw err;\n          }\n        }\n      }\n    } else {\n      // Nobody's watching anyway\n      stream.removeListener('data', onData);\n      stream.on('newListener', onNewListener);\n    }\n  }\n\n  function onNewListener(event) {\n    if (event === 'keypress') {\n      stream.on('data', onData);\n      stream.removeListener('newListener', onNewListener);\n    }\n  }\n\n  if (stream.listenerCount('keypress') > 0) {\n    stream.on('data', onData);\n  } else {\n    stream.on('newListener', onNewListener);\n  }\n}\n\n","// This file is a modified version of the original file from the readline module of Node.js\n// Copyright Joyent, Inc. and other Node contributors.\n// SPDX-License-Identifier: MIT\nexport const kEscape = '\\x1b';\nexport const kSubstringSearch = Symbol('kSubstringSearch');\nexport const kUTF16SurrogateThreshold = 0x10000; // 2 ** 16\n\nexport function CSI(strings, ...args) {\n  let ret = `${kEscape}[`;\n  for (let n = 0; n < strings.length; n++) {\n    ret += strings[n];\n    if (n < args.length) { ret += args[n]; }\n  }\n  return ret;\n}\n\nCSI.kEscape = kEscape;\nCSI.kClearToLineBeginning = CSI`1K`;\nCSI.kClearToLineEnd = CSI`0K`;\nCSI.kClearLine = CSI`2K`;\nCSI.kClearScreenDown = CSI`0J`;\n\n// TODO(BridgeAR): Treat combined characters as single character, i.e,\n// 'a\\u0301' and '\\u0301a' (both have the same visual output).\n// Check Canonical_Combining_Class in\n// http://userguide.icu-project.org/strings/properties\nexport function charLengthLeft(str, i) {\n  if (i <= 0) { return 0; }\n  if ((i > 1 &&\n      str.codePointAt(i - 2) >= kUTF16SurrogateThreshold) ||\n      str.codePointAt(i - 1) >= kUTF16SurrogateThreshold) {\n    return 2;\n  }\n  return 1;\n}\n\nexport function charLengthAt(str, i) {\n  if (str.length <= i) {\n    // Pretend to move to the right. This is necessary to autocomplete while\n    // moving to the right.\n    return 1;\n  }\n  return str.codePointAt(i) >= kUTF16SurrogateThreshold ? 2 : 1;\n}\n\n/*\n  Some patterns seen in terminal key escape codes, derived from combos seen\n  at http://www.midnight-commander.org/browser/lib/tty/key.c\n\n  ESC letter\n  ESC [ letter\n  ESC [ modifier letter\n  ESC [ 1 ; modifier letter\n  ESC [ num char\n  ESC [ num ; modifier char\n  ESC O letter\n  ESC O modifier letter\n  ESC O 1 ; modifier letter\n  ESC N letter\n  ESC [ [ num ; modifier char\n  ESC [ [ 1 ; modifier letter\n  ESC ESC [ num char\n  ESC ESC O letter\n\n  - char is usually ~ but $ and ^ also happen with rxvt\n  - modifier is 1 +\n                (shift     * 1) +\n                (left_alt  * 2) +\n                (ctrl      * 4) +\n                (right_alt * 8)\n  - two leading ESCs apparently mean the same as one leading ESC\n*/\n// eslint-disable-next-line complexity\nexport function * emitKeys(stream) {\n  while (true) {\n    let ch = yield;\n    let s = ch;\n    let escaped = false;\n\n    const key = {\n      sequence: null,\n      name: undefined,\n      ctrl: false,\n      meta: false,\n      shift: false,\n      fn: false\n    };\n\n    if (ch === kEscape) {\n      escaped = true;\n      s += ch = yield;\n\n      if (ch === kEscape) {\n        s += ch = yield;\n      }\n    }\n\n    if (escaped && (ch === 'O' || ch === '[')) {\n      // ANSI escape sequence\n      let code = ch;\n      let modifier = 0;\n\n      if (ch === 'O') {\n        // ESC O letter\n        // ESC O modifier letter\n        s += ch = yield;\n\n        if (ch >= '0' && ch <= '9') {\n          modifier = (ch >> 0) - 1;\n          s += ch = yield;\n        }\n\n        code += ch;\n      } else if (ch === '[') {\n        // ESC [ letter\n        // ESC [ modifier letter\n        // ESC [ [ modifier letter\n        // ESC [ [ num char\n        s += ch = yield;\n\n        if (ch === '[') {\n          // \\x1b[[A\n          //      ^--- escape codes might have a second bracket\n          code += ch;\n          s += ch = yield;\n        }\n\n        /*\n         * Here and later we try to buffer just enough data to get\n         * a complete ascii sequence.\n         *\n         * We have basically two classes of ascii characters to process:\n         *\n         *\n         * 1. `\\x1b[24;5~` should be parsed as { code: '[24~', modifier: 5 }\n         *\n         * This particular example is featuring Ctrl+F12 in xterm.\n         *\n         *  - `;5` part is optional, e.g. it could be `\\x1b[24~`\n         *  - first part can contain one or two digits\n         *  - there is also special case when there can be 3 digits\n         *    but without modifier. They are the case of paste bracket mode\n         *\n         * So the generic regexp is like /^(?:\\d\\d?(;\\d)?[~^$]|\\d{3}~)$/\n         *\n         *\n         * 2. `\\x1b[1;5H` should be parsed as { code: '[H', modifier: 5 }\n         *\n         * This particular example is featuring Ctrl+Home in xterm.\n         *\n         *  - `1;5` part is optional, e.g. it could be `\\x1b[H`\n         *  - `1;` part is optional, e.g. it could be `\\x1b[5H`\n         *\n         * So the generic regexp is like /^((\\d;)?\\d)?[A-Za-z]$/\n         *\n         */\n        const cmdStart = s.length - 1;\n\n        // Skip one or two leading digits\n        if (ch >= '0' && ch <= '9') {\n          s += ch = yield;\n\n          if (ch >= '0' && ch <= '9') {\n            s += ch = yield;\n\n            if (ch >= '0' && ch <= '9') {\n              s += ch = yield;\n            }\n          }\n        }\n\n        // skip modifier\n        if (ch === ';') {\n          s += ch = yield;\n\n          if (ch >= '0' && ch <= '9') {\n            s += yield;\n          }\n        }\n\n        /*\n         * We buffered enough data, now trying to extract code\n         * and modifier from it\n         */\n        const cmd = s.slice(cmdStart);\n        let match;\n\n        if ((match = /^(?:(\\d\\d?)(?:;(\\d))?([~^$])|(\\d{3}~))$/.exec(cmd))) {\n          if (match[4]) {\n            code += match[4];\n          } else {\n            code += match[1] + match[3];\n            modifier = (match[2] || 1) - 1;\n          }\n        } else if ((match = /^((\\d;)?(\\d))?([A-Za-z])$/.exec(cmd))) {\n          code += match[4];\n          modifier = (match[3] || 1) - 1;\n        } else {\n          code += cmd;\n        }\n      }\n\n      // Parse the key modifier\n      key.ctrl = Boolean(modifier & 4);\n      key.meta = Boolean(modifier & 10);\n      key.shift = Boolean(modifier & 1);\n      key.code = code;\n\n      if (!key.meta) {\n        const parts = [...s];\n        if (parts[0] === '\\u001b' && parts[1] === '\\u001b') {\n          key.meta = true;\n        }\n      }\n\n      // Parse the key itself\n      switch (code) {\n        /* xterm/gnome ESC [ letter (with modifier) */\n        case '[P': key.name = 'f1'; key.fn = true; break;\n        case '[Q': key.name = 'f2'; key.fn = true; break;\n        case '[R': key.name = 'f3'; key.fn = true; break;\n        case '[S': key.name = 'f4'; key.fn = true; break;\n\n        /* xterm/gnome ESC O letter (without modifier) */\n        case 'OP': key.name = 'f1'; key.fn = true; break;\n        case 'OQ': key.name = 'f2'; key.fn = true; break;\n        case 'OR': key.name = 'f3'; key.fn = true; break;\n        case 'OS': key.name = 'f4'; key.fn = true; break;\n\n        /* xterm/rxvt ESC [ number ~ */\n        case '[11~': key.name = 'f1'; key.fn = true; break;\n        case '[12~': key.name = 'f2'; key.fn = true; break;\n        case '[13~': key.name = 'f3'; key.fn = true; break;\n        case '[14~': key.name = 'f4'; key.fn = true; break;\n\n        /* paste bracket mode */\n        case '[200~': key.name = 'paste-start'; break;\n        case '[201~': key.name = 'paste-end'; break;\n\n        /* from Cygwin and used in libuv */\n        case '[[A': key.name = 'f1'; key.fn = true; break;\n        case '[[B': key.name = 'f2'; key.fn = true; break;\n        case '[[C': key.name = 'f3'; key.fn = true; break;\n        case '[[D': key.name = 'f4'; key.fn = true; break;\n        case '[[E': key.name = 'f5'; key.fn = true; break;\n\n        /* common */\n        case '[15~': key.name = 'f5'; key.fn = true; break;\n        case '[17~': key.name = 'f6'; key.fn = true; break;\n        case '[18~': key.name = 'f7'; key.fn = true; break;\n        case '[19~': key.name = 'f8'; key.fn = true; break;\n        case '[20~': key.name = 'f9'; key.fn = true; break;\n        case '[21~': key.name = 'f10'; key.fn = true; break;\n        case '[23~': key.name = 'f11'; key.fn = true; break;\n        case '[24~': key.name = 'f12'; key.fn = true; break;\n\n        /* xterm ESC [ letter */\n        case '[A': key.name = 'up'; break;\n        case '[B': key.name = 'down'; break;\n        case '[C': key.name = 'right'; break;\n        case '[D': key.name = 'left'; break;\n        case '[E': key.name = 'clear'; break;\n        case '[F': key.name = 'end'; break;\n        case '[H': key.name = 'home'; break;\n\n        /* xterm/gnome ESC O letter */\n        case 'OA': key.name = 'up'; break;\n        case 'OB': key.name = 'down'; break;\n        case 'OC': key.name = 'right'; break;\n        case 'OD': key.name = 'left'; break;\n        case 'OE': key.name = 'clear'; break;\n        case 'OF': key.name = 'end'; break;\n        case 'OH': key.name = 'home'; break;\n\n        /* xterm/rxvt ESC [ number ~ */\n        case '[1~': key.name = 'home'; break;\n        case '[2~': key.name = 'insert'; break;\n        case '[3~': key.name = 'delete'; break;\n        case '[4~': key.name = 'end'; break;\n        case '[5~': key.name = 'pageup'; break;\n        case '[6~': key.name = 'pagedown'; break;\n\n        /* putty */\n        case '[[5~': key.name = 'pageup'; break;\n        case '[[6~': key.name = 'pagedown'; break;\n\n        /* rxvt */\n        case '[7~': key.name = 'home'; break;\n        case '[8~': key.name = 'end'; break;\n\n        /* rxvt keys with modifiers */\n        case '[a': key.name = 'up'; key.shift = true; break;\n        case '[b': key.name = 'down'; key.shift = true; break;\n        case '[c': key.name = 'right'; key.shift = true; break;\n        case '[d': key.name = 'left'; key.shift = true; break;\n        case '[e': key.name = 'clear'; key.shift = true; break;\n\n        case '[2$': key.name = 'insert'; key.shift = true; break;\n        case '[3$': key.name = 'delete'; key.shift = true; break;\n        case '[5$': key.name = 'pageup'; key.shift = true; break;\n        case '[6$': key.name = 'pagedown'; key.shift = true; break;\n        case '[7$': key.name = 'home'; key.shift = true; break;\n        case '[8$': key.name = 'end'; key.shift = true; break;\n\n        case 'Oa': key.name = 'up'; key.ctrl = true; break;\n        case 'Ob': key.name = 'down'; key.ctrl = true; break;\n        case 'Oc': key.name = 'right'; key.ctrl = true; break;\n        case 'Od': key.name = 'left'; key.ctrl = true; break;\n        case 'Oe': key.name = 'clear'; key.ctrl = true; break;\n\n        case '[2^': key.name = 'insert'; key.ctrl = true; break;\n        case '[3^': key.name = 'delete'; key.ctrl = true; break;\n        case '[5^': key.name = 'pageup'; key.ctrl = true; break;\n        case '[6^': key.name = 'pagedown'; key.ctrl = true; break;\n        case '[7^': key.name = 'home'; key.ctrl = true; break;\n        case '[8^': key.name = 'end'; key.ctrl = true; break;\n\n        case '[1;10': key.meta = true; break;\n\n        /* misc. */\n        case '[Z': key.name = 'tab'; key.shift = true; break;\n        default: key.name = 'undefined'; break;\n      }\n\n    } else if (ch === '\\r') {\n      // carriage return\n      key.name = 'return';\n      key.meta = escaped;\n    } else if (ch === '\\n') {\n      // Enter, should have been called linefeed\n      key.name = 'enter';\n      key.meta = escaped;\n    } else if (ch === '\\t') {\n      // tab\n      key.name = 'tab';\n      key.meta = escaped;\n    } else if (ch === '\\b' || ch === '\\x7f') {\n      // backspace or ctrl+h\n      key.name = 'backspace';\n      key.meta = escaped;\n    } else if (ch === kEscape) {\n      // escape key\n      key.name = 'escape';\n      key.meta = escaped;\n    } else if (ch === ' ') {\n      key.name = 'space';\n      key.meta = escaped;\n    } else if (!escaped && ch <= '\\x1a') {\n      // ctrl+letter\n      key.name = String.fromCharCode(ch.charCodeAt(0) + 'a'.charCodeAt(0) - 1);\n      key.ctrl = true;\n    } else if (/^[0-9A-Za-z]$/.exec(ch) !== null) {\n      // Letter, number, shift+letter\n      key.name = ch.toLowerCase();\n      key.shift = /^[A-Z]$/.exec(ch) !== null;\n      key.meta = escaped;\n    } else if (escaped) {\n      // Escape sequence timeout\n      key.name = ch.length ? undefined : 'escape';\n      key.meta = false;\n    }\n\n    key.sequence = s;\n\n    if (s.length !== 0 && (key.name !== undefined || escaped)) {\n      /* Named character or sequence */\n      stream.emit('keypress', escaped ? undefined : s, key);\n    } else if (charLengthAt(s, 0) === s.length) {\n      /* Single unnamed character, e.g. \".\" */\n      stream.emit('keypress', s, key);\n    }\n\n    /* Unrecognized or broken escape sequence, don't emit anything */\n  }\n}\n\n// This runs in O(n log n).\nexport function commonPrefix(strings) {\n  if (strings.length === 0) {\n    return '';\n  }\n  if (strings.length === 1) {\n    return strings[0];\n  }\n\n  const sorted = strings.slice().sort();\n  const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n\n  for (let i = 0; i < min.length; i++) {\n    if (min[i] !== max[i]) {\n      return min.slice(0, i);\n    }\n  }\n  return min;\n}\n","/* eslint-disable no-control-regex */\nimport type readline from 'node:readline';\n\nexport const PRINTABLE_CHAR_REGEX = /^[\\p{L}\\p{N}\\p{P}\\p{S}\\p{Z}\\p{Sm}]+$/u;\nexport const NON_PRINTABLE_CHAR_REGEX = /[^\\P{Cc}\\P{Cf}\\p{L}\\p{N}\\p{P}\\p{S}\\p{Z}]/u;\n\nexport const createShortcut = (key: readline.Key): string => {\n  const modifiers = [];\n  if (key.fn) modifiers.push('fn');\n  if (key.ctrl) modifiers.push('ctrl');\n  if (key.shift) modifiers.push('shift');\n  if (key.meta) modifiers.push('meta');\n  let keyName = key.name || (isPrintableCharacter(key.sequence) ? key.sequence : '');\n  if (keyName === 'undefined') keyName = '';\n  return modifiers.length > 0 ? `${modifiers.join('+')}+${keyName}` : keyName;\n};\n\n// Unicode ranges for general printable characters including emojis\nexport const isPrintableCharacter = s => {\n  return PRINTABLE_CHAR_REGEX.test(s) && !NON_PRINTABLE_CHAR_REGEX.test(s);\n};\n","export const keycodes = [\n  { sequence: '\\r', shortcut: 'return' },\n  { sequence: '\\x03', shortcut: 'ctrl+c', ctrl: true },\n\n  { sequence: '\\x1C', shortcut: 'ctrl+4', ctrl: true },\n  { sequence: '\\x1D', shortcut: 'ctrl+5', ctrl: true },\n  { sequence: '\\x1E', shortcut: 'ctrl+6', ctrl: true },\n  { sequence: '\\x1F', shortcut: 'ctrl+7', ctrl: true },\n\n  { sequence: '\\x1B[1;10A', shortcut: 'shift+meta+up', code: '[1;10A', name: 'up', meta: true, shift: true },\n  { sequence: '\\x1B[1;10B', shortcut: 'shift+meta+down', code: '[1;10B', name: 'down', meta: true, shift: true },\n  { sequence: '\\x1B[1;10C', shortcut: 'shift+meta+right', code: '[1;10C', name: 'left', meta: true, shift: true },\n  { sequence: '\\x1B[1;10D', shortcut: 'shift+meta+left', code: '[1;10D', name: 'right', meta: true, shift: true },\n\n  { sequence: '\\x1B[1;2A', shortcut: 'shift+up', code: '[1;2A', shift: true },\n  { sequence: '\\x1B[1;2B', shortcut: 'shift+down', code: '[1;2B', shift: true },\n  { sequence: '\\x1B[1;2C', shortcut: 'shift+right', code: '[1;2C', shift: true },\n  { sequence: '\\x1B[1;2D', shortcut: 'shift+left', code: '[1;2D', shift: true },\n\n  { sequence: '\\x1B[1;2F', shortcut: 'fn+shift+right', code: '[1;2F', fn: true, shift: true },\n  { sequence: '\\x1B[1;2H', shortcut: 'fn+shift+left', code: '[1;2H', fn: true, shift: true },\n\n  { sequence: '\\x1B[1;9F', shortcut: 'fn+meta+right', code: '[1;9F', fn: true, meta: true },\n  { sequence: '\\x1B[1;9H', shortcut: 'fn+meta+left', code: '[1;9H', fn: true, meta: true },\n\n  { sequence: '\\x1B[1;10F', shortcut: 'fn+shift+meta+right', code: '[1;10F', name: 'right', fn: true, meta: true, shift: true },\n  { sequence: '\\x1B[1;10H', shortcut: 'fn+shift+meta+left', code: '[1;10H', name: 'left', fn: true, meta: true, shift: true },\n\n  { sequence: '\\x1B[11~', shortcut: 'f1', fn: true },\n  { sequence: '\\x1B[12~', shortcut: 'f2', fn: true },\n  { sequence: '\\x1B[13~', shortcut: 'f3', fn: true },\n  { sequence: '\\x1B[14~', shortcut: 'f4', fn: true },\n  { sequence: '\\x1B[15~', shortcut: 'f5', fn: true },\n  { sequence: '\\x1B[17~', shortcut: 'f6', fn: true },\n  { sequence: '\\x1B[18~', shortcut: 'f7', fn: true },\n  { sequence: '\\x1B[19~', shortcut: 'f8', fn: true },\n  { sequence: '\\x1B[20~', shortcut: 'f9', fn: true },\n  { sequence: '\\x1B[21~', shortcut: 'f10', fn: true },\n  { sequence: '\\x1B[23~', shortcut: 'f11', fn: true },\n  { sequence: '\\x1B[24~', shortcut: 'f12', fn: true },\n  { sequence: '\\x1B[25~', shortcut: 'f13', fn: true },\n  { sequence: '\\x1B[26~', shortcut: 'f14', fn: true },\n  { sequence: '\\x1B[28~', shortcut: 'f15', fn: true },\n  { sequence: '\\x1B[29~', shortcut: 'f16', fn: true },\n  { sequence: '\\x1B[31~', shortcut: 'f17', fn: true },\n  { sequence: '\\x1B[32~', shortcut: 'f18', fn: true },\n  { sequence: '\\x1B[33~', shortcut: 'f19', fn: true },\n  { sequence: '\\x1B[34~', shortcut: 'f20', fn: true },\n\n  { sequence: '\\x1BOP', shortcut: 'f1', fn: true },\n  { sequence: '\\x1BOQ', shortcut: 'f2', fn: true },\n  { sequence: '\\x1BOR', shortcut: 'f3', fn: true },\n  { sequence: '\\x1BOS', shortcut: 'f4', fn: true },\n\n  { sequence: '\\x1B\\x1B[5~', shortcut: 'fn+meta+up', code: '[5~', meta: true, fn: true },\n  { sequence: '\\x1B\\x1B[6~', shortcut: 'fn+meta+down', code: '[6~', meta: true, fn: true },\n  { sequence: '\\x1BOl', shortcut: 'num_key_comma' },\n  { sequence: '\\x1BOm', shortcut: 'num_key_minus' },\n  { sequence: '\\x1BOn', shortcut: 'num_key_period' },\n  { sequence: '\\x1BOp', shortcut: 'num_key_0' },\n  { sequence: '\\x1BOq', shortcut: 'num_key_1' },\n  { sequence: '\\x1BOr', shortcut: 'num_key_2' },\n  { sequence: '\\x1BOs', shortcut: 'num_key_3' },\n  { sequence: '\\x1BOt', shortcut: 'num_key_4' },\n  { sequence: '\\x1BOu', shortcut: 'num_key_5' },\n  { sequence: '\\x1BOv', shortcut: 'num_key_6' },\n  { sequence: '\\x1BOw', shortcut: 'num_key_7' },\n  { sequence: '\\x1BOx', shortcut: 'num_key_8' },\n  { sequence: '\\x1BOy', shortcut: 'num_key_9' }\n];\n"],"mappings":"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","names":["kEscape","input"]}